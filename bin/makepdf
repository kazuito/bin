#!/bin/bash

# Option parsing template by http://qiita.com/rita_cano_bika/items/9fcb2a61c6f360632541
PROGNAME=$(basename $0)
LATEX_BIN=uplatex
BIBTEX_BIN=pbibtex

# Whether LaTeX binary (command) is manually specified or not
LATEX_BIN_SPECIFIED=0
# Read file and find options
autodetect=1

function error_exit() {
  local error_code=1
  if [ ! -z "$1" ]; then
    echo "$PROGNAME: $1" 1>&2
  fi
  if [ ! -z "$2" ]; then
    error_code=$2
  fi
  exit $error_code
}

function update_latex_bin () {
  if [ -x `which $1` -o -x "$1" ] ; then
    LATEX_BIN=$1
    LATEX_BIN_SPECIFIED=1
  else
    echo "$1 が存在しません．" 1>&2
    exit 1
  fi
}

for OPT in "$@"
do
  case "$OPT" in
    '-o'|'--open' )
      open=1
      shift
      ;;
    '-d'|'--directory'|'-D')
      if [[ "$1" = "-D" ]]; then
        pdfsamedir=1
      fi
      chdst=1
      if [[ ! -z "$2" ]] && [[ ! "$2" =~ ^-+ ]]; then
        dstdir="$2"
        shift
      fi
      shift
      ;;
    '--no-detect')
      autodetect=0
      shift
      ;;
    '--detect')
      autodetect=1
      shift
      ;;
    '-t')
      pdfsamedir=1
      chdst=1
      dstdirname=texfiles
      shift
      ;;
    '-p')
      if [[ ! -z "$2" ]]; then
        pdfbasename="$2"
      else
        echo "$PROGNAME: p オプションには引数が必要です．" 1>&2
        exit 1
      fi
      shift 2
      ;;
    '-r'|'--remove')
      texfilesdelete=1
      shift
      ;;
    '--platex')
      update_latex_bin platex
      shift
      ;;
    '--uplatex')
      update_latex_bin uplatex
      shift
      ;;
    '--compiler'|'--comamnd')
      update_latex_bin $2
      shift 2
      ;;
    '--'|'-' )
      shift 1
      param+=( "$@" )
      break
      ;;
    -*)
      echo "$PROGNAME: 「$(echo $1 | sed 's/^-*//')」オプションは存在しません．" 1>&2
      exit 1
      ;;
    *)
      if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
        param+=( "$1" )
        shift 1
      fi
      ;;
  esac
done

function check_file () {
  if [ -z "$1" ]; then
    error_exit "引数がありません。"
  fi

  local _file_path=$1
  if [ ! -f "$_file_path" ]; then
    error_exit "ファイル $_file_path は存在しません。"
  fi

  local _file_base=$(basename $_file_path)
  local _file_dir=$(dirname $_file_path)
  local _file_noext=${_file_base%.tex}
  if [ "$_file_base" = "$_file_noext" ]; then
    error_exit "ファイル $_file_path は .tex ファイルではありません。"
  fi

  src_file=$_file_path
  srcbn=$_file_base
  srcdir=$_file_dir
  noext=$_file_noext

  # If --detect option is enabled and  LaTeX binary (command) was not specified
  if [ "$autodetect" = "1" -a "$LATEX_BIN_SPECIFIED" = "0" ]; then
    tmp=$(grep -E '^%\s+makepdf-mainfile:\s' "$_file_path" | awk '{ $1 = ""; $2 = ""; print }' | tr -d ' ')
    if [ ! -z "$tmp" ]; then
      local _new_main_file=$_file_dir/$tmp
      echo "Main file changed: $_file_path -> $_new_main_file"
      check_file $_new_main_file
      return
    fi
  fi

  # If --detect option is enabled and pdfbasename (maybe specified by -p option) is empty
  if [[ "$autodetect" = "1" ]] && [[ -z "$pdfbasename" ]]; then
    tmp=$(grep -E '^%\s+makepdf-filename:\s' "$src_file" | awk '{ $1 = ""; $2 = ""; print }' | tr -d ' ')
    if [ ! "$tmp" = "" ]; then
      pdfbasename="$tmp"
    fi
  fi

  # If --detect option is enabled and  LaTeX binary (command) was not specified
  if [ "$autodetect" = "1" -a "$LATEX_BIN_SPECIFIED" = "0" ]; then
    tmp=$(grep -E '^%\s+makepdf-compiler:\s' "$src_file" | awk '{ $1 = ""; $2 = ""; print }' | tr -d ' ')
    if [ ! -z "$tmp" ]; then
      LATEX_BIN=$tmp
    fi
  fi
}

check_file $param

if [ "$chdst" = "1" -a -z "$dstdir" ]; then
  if [ -z "$dstdirname" ]; then
    dstdirname=$noext
  fi
  dstdir=$srcdir/$dstdirname
elif [ ! "$chdst" = "1" ]; then
  dstdir=.
fi

if [[ ! -d "$dstdir" ]]; then
  mkdir -p $dstdir
fi

if [[ "$pdfsamedir" = "1" ]]; then
  pdfdir=$srcdir
else
  pdfdir=$dstdir
fi

if [[ -z "$pdfbasename" ]]; then
  pdfbasename=$noext.pdf
fi

pdffn=$pdfdir/$pdfbasename

including_bibtex=`fgrep '\bibliography{' $param`

for f in 1st 2nd 3rd 4th final; do
  echo "---------- $f try ----------"
  result=`$LATEX_BIN -interaction=nonstopmode --output-directory="$dstdir" $param`
  if [ ! $? = 0 ]; then
    echo "$result"
    exit 1
  fi
  # TeX files including bibtex references need to compile twice at least
  if [ ! -z "$including_bibtex" ]; then
    result=`$BIBTEX_BIN $dstdir/$noext.aux`
    if [ ! $? = 0 ]; then
      echo "$result"
      exit 1
    fi
    if [ $f = '1st' ]; then
      continue
    fi
  fi
  grep 'Rerun' "$dstdir/$noext.log" || break
done

dvipdfmx -o $pdffn "$dstdir/$noext.dvi"

if [[ "$texfilesdelete" = "1" ]]; then
  rm -f $dstdir/$noext.{dvi,aux,log}
fi

if [ "$open" = 1 ] ; then
    open $pdffn
fi
